{"version":3,"sources":["components/ExpenseForm.js","components/ExpenseItem.js","components/ExpenseList.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseForm","_ref","charge","amount","handleCharge","handleAmount","handleSubmit","edit","react_default","a","createElement","onSubmit","className","htmlFor","type","id","name","placeholder","value","onChange","index_esm","ExpenseItem","_ref$expense","expense","handleDelete","handleEdit","aria-label","onClick","ExpenseList","expenses","clearItems","Fragment","map","components_ExpenseItem","key","length","Alert","text","concat","initialExpenses","localStorage","getItem","JSON","parse","App","_useState","useState","_useState2","Object","slicedToArray","setExpenses","_useState3","_useState4","setCharge","_useState5","_useState6","setAmount","_useState7","show","_useState8","alert","setAlert","_useState9","_useState10","setEdit","_useState11","_useState12","setId","useEffect","console","log","setItem","stringify","handleAlert","setTimeout","components_Alert","components_ExpenseForm","e","preventDefault","tempExpenses","item","objectSpread","singleExpense","uuid","toConsumableArray","target","parseInt","components_ExpenseList","filter","find","reduce","acc","curr","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c0738dc.chunk.js","sourcesContent":["import React from \"react\";\nimport { MdSend } from \"react-icons/md\";\nconst ExpenseForm = ({\n  charge,\n  amount,\n  handleCharge,\n  handleAmount,\n  handleSubmit,\n  edit\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-center\">\n        <div className=\"form-group\">\n          <label htmlFor=\"expense\">charge</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"charge\"\n            name=\"charge\"\n            placeholder=\"e.g. rent\"\n            value={charge}\n            onChange={handleCharge}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">amount</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            id=\"amount\"\n            name=\"amount\"\n            placeholder=\"e.g. 100\"\n            value={amount}\n            onChange={handleAmount}\n          />\n        </div>\n      </div>\n      <button type=\"submit\" className=\"btn\">\n        {edit ? \"edit\" : \"submit\"}\n        {/* submit  */}\n        <MdSend className=\"btn-icon\" />\n      </button>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n","import React from \"react\";\nimport { MdEdit, MdDelete } from \"react-icons/md\";\nconst ExpenseItem = ({\n  expense: { id, charge, amount },\n  handleDelete,\n  handleEdit\n}) => {\n  return (\n    <li className=\"item\">\n      <div className=\"info\">\n        <span className=\"expense\">{charge}</span>\n        <span className=\"amount\">Rs {amount}</span>\n      </div>\n      <div>\n        <button\n          className=\"edit-btn\"\n          aria-label=\"edit button\"\n          onClick={() => handleEdit(id)}\n        >\n          <MdEdit />\n        </button>\n        <button\n          className=\"clear-btn\"\n          aria-label=\"delete button\"\n          onClick={() => handleDelete(id)}\n        >\n          <MdDelete />\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default ExpenseItem;\n","import React from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport { MdDelete } from \"react-icons/md\";\nconst ExpenseList = ({ expenses, handleDelete, handleEdit, clearItems }) => {\n  return (\n    <>\n      <ul className=\"list\">\n        {expenses.map(expense => {\n          return (\n            <ExpenseItem\n              key={expense.id}\n              expense={expense}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n            />\n          );\n        })}\n      </ul>\n      {expenses.length > 0 && (\n        <button className=\"btn\" onClick={clearItems}>\n          clear expenses\n          <MdDelete className=\"btn-icon\" />\n        </button>\n      )}\n    </>\n  );\n};\n\nexport default ExpenseList;\n","import React from \"react\";\n\nconst Alert = ({ type, text }) => {\n  return <div className={`alert alert-${type}`}>{text}</div>;\n};\n\nexport default Alert;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ExpenseForm from \"./components/ExpenseForm\";\nimport ExpenseList from \"./components/ExpenseList\";\nimport Alert from \"./components/Alert\";\nimport uuid from \"uuid/v4\";\n// const initialExpenses = [\n//   { id: uuid(), charge: \"rent\", amount: 1600 },\n//   { id: uuid(), charge: \"car payment\", amount: 400 },\n//   {\n//     id: uuid(),\n//     charge: \"credit card bill \",\n//     amount: 1200\n//   }\n// ];\nconst initialExpenses = localStorage.getItem(\"expenses\")\n  ? JSON.parse(localStorage.getItem(\"expenses\"))\n  : [];\nfunction App() {\n  // all expenses, add expense\n  const [expenses, setExpenses] = useState(initialExpenses);\n  // single expense\n  const [charge, setCharge] = useState(\"\");\n  // single amount\n  const [amount, setAmount] = useState(\"\");\n  // alert\n  const [alert, setAlert] = useState({ show: false });\n  // edit\n  const [edit, setEdit] = useState(false);\n  // id\n  const [id, setId] = useState(0);\n  useEffect(() => {\n    console.log(\"called\");\n\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n  }, [expenses]);\n  // *********** functionality **************\n  //add charge\n  const handleCharge = e => {\n    setCharge(e.target.value);\n  };\n  // add amount\n  const handleAmount = e => {\n    let amount = e.target.value;\n    if (amount === \"\") {\n      setAmount(amount);\n    } else {\n      setAmount(parseInt(amount));\n    }\n  };\n\n  // handle alert\n  const handleAlert = ({ type, text }) => {\n    setAlert({ show: true, type, text });\n    setTimeout(() => {\n      setAlert({ show: false });\n    }, 7000);\n  };\n  // handle submit\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (charge !== \"\" && amount > 0) {\n      if (edit) {\n        let tempExpenses = expenses.map(item => {\n          return item.id === id ? { ...item, charge, amount } : item;\n        });\n        setExpenses(tempExpenses);\n        setEdit(false);\n      } else {\n        const singleExpense = { id: uuid(), charge, amount };\n        setExpenses([...expenses, singleExpense]);\n        handleAlert({ type: \"success\", text: \"item added\" });\n      }\n      // set charge back to empty string\n      setCharge(\"\");\n      // set amount back to zero\n      setAmount(\"\");\n    } else {\n      handleAlert({\n        type: \"danger\",\n        text: `charge can't be empty value and amount value has to be bigger than zero`\n      });\n    }\n  };\n  // handle delete\n  const handleDelete = id => {\n    let tempExpenses = expenses.filter(item => item.id !== id);\n    setExpenses(tempExpenses);\n    handleAlert({ type: \"danger\", text: \"item deleted\" });\n  };\n  //clear all items\n  const clearItems = () => {\n    setExpenses([]);\n  };\n  // handle edit\n  const handleEdit = id => {\n    let expense = expenses.find(item => item.id === id);\n    let { charge, amount } = expense;\n    setCharge(charge);\n    setAmount(amount);\n    setEdit(true);\n    setId(id);\n  };\n\n  return (\n    <>\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <h1>budget calculator</h1>\n      <main className=\"App\">\n        <ExpenseForm\n          handleSubmit={handleSubmit}\n          charge={charge}\n          handleCharge={handleCharge}\n          amount={amount}\n          handleAmount={handleAmount}\n          edit={edit}\n        />\n        <ExpenseList\n          expenses={expenses}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          clearItems={clearItems}\n        />\n      </main>\n      <h1>\n        total spending :\n        <span className=\"total\">\n          Rs \n          {expenses.reduce((acc, curr) => {\n            return (acc += curr.amount);\n          }, 0)}\n        </span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}